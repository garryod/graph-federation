prometheus:
  enabled: true
  kube-state-metrics:
    enabled: false
  prometheus-node-exporter:
    enabled: false
  prometheus-pushgateway:
    enabled: false
  rbac:
    create: false
  configmapReload:
    prometheus:
      resources:
        limits:
          cpu: 100m
          memory: 400Mi
  serviceAccounts:
    prometheus-node-exporter:
      create: false
      name: default-full-access-mounted
    pushgateway:
      create: false
      name: default-full-access-mounted
    server:
      create: false
      name: default-full-access-mounted
  alertmanager:
    persistence:
      enabled: false
  server:
    persistentVolume:
      enabled: false
    ingress:
      enabled: true
      hosts:
        - graph-metrics.diamond.ac.uk
    resources:
      limits:
        cpu: 50m
        memory: 400Mi
  serverFiles:
    prometheus.yml:
      scrape_configs:
        - job_name: prometheus
          static_configs:
            - targets:
                - localhost:9090
        - job_name: kubernetes-service-endpoints
          kubernetes_sd_configs:
            - role: endpoints
              namespaces:
                own_namespace: true
          relabel_configs:
            - source_labels:
                [__meta_kubernetes_service_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels:
                [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              action: replace
              target_label: __scheme__
              regex: (https?)
            - source_labels:
                [__meta_kubernetes_service_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels:
                [
                  __address__,
                  __meta_kubernetes_service_annotation_prometheus_io_port,
                ]
              action: replace
              target_label: __address__
              regex: (.+?)(?::\d+)?;(\d+)
              replacement: $1:$2
            - action: labelmap
              regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: namespace
            - source_labels: [__meta_kubernetes_service_name]
              action: replace
              target_label: service
            - source_labels: [__meta_kubernetes_pod_node_name]
              action: replace
              target_label: node
        - job_name: kubernetes-pods
          kubernetes_sd_configs:
            - role: pod
              namespaces:
                own_namespace: true
          relabel_configs:
            - source_labels:
                [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels:
                [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels:
                [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
              action: replace
              regex: (https?)
              target_label: __scheme__
            - source_labels:
                [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels:
                [
                  __address__,
                  __meta_kubernetes_pod_annotation_prometheus_io_port,
                ]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: namespace
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: pod
            - source_labels: [__meta_kubernetes_pod_phase]
              regex: Pending|Succeeded|Failed|Completed
              action: drop

jaeger:
  enabled: true
  provisionDataStore:
    cassandra: false
  allInOne:
    enabled: true
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "14269"
    ingress:
      enabled: true
      pathType: Prefix
      hosts:
        - graph-tracing.diamond.ac.uk
  storage:
    type: none
  agent:
    enabled: false
  collector:
    enabled: false
  query:
    enabled: false

opentelemetry-collector:
  enabled: true
  mode: deployment
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
  ports:
    prometheus:
      enabled: true
      containerPort: 9090
      servicePort: 9090
      hostPort: 9090
      protocol: TCP
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
  config:
    receivers:
      jaeger: null
      zipkin: null
      prometheus:
        config:
          scrape_configs:
            - job_name: otel-collector
              scrape_interval: 10s
              static_configs:
                - targets:
                  - ${env:MY_POD_IP}:8888
    exporters:
      otlp/jaeger:
        endpoint: "{{ .Release.Name }}-jaeger-collector:4317"
        tls:
          insecure: true
      prometheus:
        endpoint: :9090
    service:
      pipelines:
        metrics:
          receivers:
            - otlp
            - prometheus
          processors:
            - memory_limiter
            - batch
          exporters:
            - prometheus
        traces:
          receivers:
            - otlp
          processors:
            - memory_limiter
            - batch
          exporters:
            - otlp/jaeger

router:
  enabled: true
  managedFederation:
    existingSecret: router-apikey
    graphRef: data-gateway-n63jcf@current
  extraVolumes:
  - name: router-configuration
    configMap:
      name: router-configuration
  args:
    - --hot-reload
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "44180"
  affinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/instance
                operator: In
                values:
                  - ispyb
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - mariadb-galera
          topologyKey: kubernetes.io/hostname
  configuration: {}
  myconfiguration:
    sandbox:
      enabled: true
    homepage:
      enabled: false
    supergraph:
      introspection: true
      listen: 0.0.0.0:4000
      query_planning:
        experimental_parallelism: auto
    include_subgraph_errors:
      all: true
    headers:
      all:
        request:
          - propagate:
              matching: authorization
    health_check:
      listen: 0.0.0.0:8088
    telemetry:
      instrumentation:
        spans:
          mode: spec_compliant
      exporters:
        metrics:
          common:
            resource:
              "service.name": "router"
          otlp:
            enabled: true
            endpoint: '{{ .Release.Name }}-opentelemetry-collector:4317'
            protocol: grpc
        tracing:
          common:
            resource:
              "service.name": "router"
          otlp:
            enabled: true
            endpoint: '{{ .Release.Name }}-opentelemetry-collector:4317'
            protocol: grpc
          propagation:
            trace_context: true
  resources:
    requests:
      cpu: 8
      memory: 4Gi
    limits:
      cpu: 16
      memory: 8Gi

oauth2-proxy:
  enabled: true
  ingress:
    enabled: true
    hostname: graph.diamond.ac.uk
    pathType: Prefix
    hosts:
      - graph.diamond.ac.uk
    path: /
  config:
    configFile: |-
      email_domains = [
        "diamond.ac.uk"
      ]
  alphaConfig:
    enabled: true
    configFile: |
      upstreamConfig:
        upstreams:
          - id: router
            path: /
            uri: http://{{ .Release.Name }}-router:80
      injectRequestHeaders:
        - name: Authorization
          values:
            - claim: access_token
              prefix: "Bearer "
      injectResponseHeaders:
        - name: Identity
          values:
            - claim: id_token
      providers:
        - provider: oidc
          scope: "openid profile email fedid"
          clientId: graph
          clientSecretFile: /etc/alpha/client-secret
          id: authn
          oidcConfig:
            issuerURL: https://authn.diamond.ac.uk/realms/master
            insecureAllowUnverifiedEmail: true
            audienceClaims:
              - aud
            emailClaim: email
            userIDClaim: email
  extraArgs:
    - --cookie-refresh=55s
  redis:
    enabled: true
    networkPolicy:
      enabled: false
  sessionStorage:
    type: redis
  extraVolumes:
    - name: client-secret
      secret:
        secretName: oauth2-client
        items:
          - key: secret
            path: client-secret
  extraVolumeMounts:
    - name: client-secret
      mountPath: /etc/alpha
      readOnly: true
